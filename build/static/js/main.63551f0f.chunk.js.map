{"version":3,"sources":["components/info.js","components/form.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","console","log","className","city","country","temp","wind","pressure","sunset","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","pressureData","main","setState","Math","floor","speed","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAQeA,EANF,kBACX,gCACM,+IACA,gMCIOC,EAPF,SAACC,GAAD,OACX,uBAAMC,SAAUD,EAAME,cAAtB,UACM,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,+HCeOC,EAlBC,SAACN,GAEf,OADAO,QAAQC,IAAIR,GAEV,sBAAKS,UAAU,YAAf,UACIT,EAAMU,MACN,gCACE,uHAAoBV,EAAMU,KAA1B,KAAkCV,EAAMW,WACxC,qGAAiBX,EAAMY,KAAvB,YACA,kHAAoBZ,EAAMa,KAA1B,gCACA,mFAAcb,EAAMc,SAApB,8CACA,sGAAkBd,EAAMe,aAG5B,mBAAGN,UAAU,QAAb,SAAsBT,EAAMgB,YCV5BC,EAAU,mCAmFDC,E,4MAhFbC,MAAQ,CACNP,UAAMQ,EACNV,UAAMU,EACNT,aAASS,EACTN,cAAUM,EACVP,UAAMO,EACNL,YAAQK,EACRJ,WAAOI,G,EAGTC,e,uCAAiB,WAAOC,GAAP,2BAAAC,EAAA,yDACfD,EAAEE,mBACEd,EAAOY,EAAEG,OAAOC,SAAShB,KAAKiB,OAFnB,iCAKSC,MAAM,qDAAD,OAC4BlB,EAD5B,kBAC0CO,EAD1C,kBALd,cAKPY,EALO,gBAQMA,EAAQC,OARd,OAQPC,EARO,OASbxB,QAAQC,IAAIuB,GAERhB,EAASgB,EAAKC,IAAIjB,QAClBkB,EAAO,IAAIC,MACVC,QAAQpB,GACTqB,EACFH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAErDC,EAAuC,iBAAvBT,EAAKU,KAAK3B,SAE9B,EAAK4B,SAAS,CACZ9B,KAAM+B,KAAKC,MAAMb,EAAKU,KAAK7B,MAC3BF,KAAMqB,EAAK3B,KACXO,QAASoB,EAAKC,IAAIrB,QAClBG,SAAU6B,KAAKC,MAAMJ,GACrB3B,KAAMkB,EAAKlB,KAAKgC,MAChB9B,OAAQqB,EACRpB,WAAOI,IA1BI,wBA6Bb,EAAKsB,SAAS,CACZ9B,UAAMQ,EACNV,UAAMU,EACNT,aAASS,EACTN,cAAUM,EACVP,UAAMO,EACNL,YAAQK,EACRJ,MAAO,qIApCI,4C,kGAyCjB,WACE,OACE,qBAAKP,UAAU,UAAf,SACE,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,cAAC,EAAD,MAEF,sBAAKA,UAAU,gBAAf,UACE,cAAC,EAAD,CAAMP,cAAe4C,KAAKzB,iBAC1B,cAAC,EAAD,CACET,KAAMkC,KAAK3B,MAAMP,KACjBF,KAAMoC,KAAK3B,MAAMT,KACjBC,QAASmC,KAAK3B,MAAMR,QACpBG,SAAUgC,KAAK3B,MAAML,SACrBD,KAAMiC,KAAK3B,MAAMN,KACjBE,OAAQ+B,KAAK3B,MAAMJ,OACnBC,MAAO8B,KAAK3B,MAAMH,wB,GAtElB+B,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.63551f0f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () =>(\r\n  <div>\r\n        <h2>Погодное приложение</h2>\r\n        <p>Узнайте погоду в вашем городе!</p>\r\n      </div>\r\n)\r\nexport default Info;","import React from \"react\";\r\n\r\nconst Form = (props) => (\r\n  <form onSubmit={props.weatherMethod}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Город\"/>\r\n        <button>Получить погоду</button>\r\n      </form>\r\n)\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = (props) => {\r\n  console.log(props)\r\n  return (\r\n    <div className=\"infoWeath\">\r\n      { props.city &&\r\n        <div>\r\n          <p>Местоположение: {props.city}, {props.country}</p>\r\n          <p>Температура: {props.temp} °C</p>\r\n          <p>Скорость ветра: {props.wind} м.сек</p>\r\n          <p>Давление: {props.pressure} мм рт.ст.</p>\r\n          <p>Заход солнца: {props.sunset}</p>\r\n        </div>\r\n      }\r\n      <p className=\"error\">{props.error}</p>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Weather;","import React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"1c63370c4faabece96d10346e447a8ae\";\n\nclass App extends React.Component {\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    wind: undefined,\n    sunset: undefined,\n    error: undefined,\n  };\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    let city = e.target.elements.city.value;\n\n    if (city) {\n      const api_url = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`\n      );\n      const data = await api_url.json();\n      console.log(data)\n\n      let sunset = data.sys.sunset;\n      let date = new Date();\n      date.setTime(sunset);\n      let sunset_date =\n        date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n      let pressureData = (data.main.pressure) * (0.750063755419211)\n\n      this.setState({\n        temp: Math.floor(data.main.temp),\n        city: data.name,\n        country: data.sys.country,\n        pressure: Math.floor(pressureData),\n        wind: data.wind.speed,\n        sunset: sunset_date,\n        error: undefined,\n      });\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        wind: undefined,\n        sunset: undefined,\n        error: \"Введите название города\",\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-sm-5 info\">\n                <Info />\n              </div>\n              <div className=\"col-sm-7 form\">\n                <Form weatherMethod={this.gettingWeather} />\n                <Weather\n                  temp={this.state.temp}\n                  city={this.state.city}\n                  country={this.state.country}\n                  pressure={this.state.pressure}\n                  wind={this.state.wind}\n                  sunset={this.state.sunset}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}